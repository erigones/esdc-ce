# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import vms.models.fields
import django.db.models.deletion
from django.conf import settings
import vms.models.base
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        ('gui', '0001_initial'),
        ('taggit', '0002_auto_20150616_2121'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('djcelery', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('enc_json', models.TextField(default=b'KGRwMQou\n', editable=False)),
                ('status_change', models.DateTimeField(default=None, verbose_name='Last status change', null=True, editable=False)),
                ('created', models.DateTimeField(verbose_name='Created', editable=False)),
                ('changed', models.DateTimeField(verbose_name='Last changed', editable=False)),
                ('disk_id', models.SmallIntegerField(verbose_name='Disk ID')),
                ('vm_hostname', models.CharField(max_length=128, verbose_name='Server hostname')),
                ('vm_disk_id', models.SmallIntegerField(verbose_name=b'Array disk ID')),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('status', models.SmallIntegerField(verbose_name='Status', choices=[(1, 'ok'), (2, 'pending'), (3, 'restore'), (4, 'lost')])),
                ('file_path', models.CharField(max_length=255, verbose_name='File path', blank=True)),
                ('checksum', models.CharField(max_length=40, verbose_name='Checksum', blank=True)),
                ('type', models.SmallIntegerField(verbose_name='Type', choices=[(1, 'Dataset'), (2, 'File')])),
                ('size', models.BigIntegerField(null=True, verbose_name='Size', blank=True)),
                ('time', models.IntegerField(null=True, verbose_name='Duration', blank=True)),
                ('note', models.CharField(max_length=255, verbose_name='Note', blank=True)),
                ('last', models.BooleanField(default=False, verbose_name='Last?')),
                ('fsfreeze', models.BooleanField(default=False, verbose_name='Application-Consistent?')),
            ],
            options={
                'verbose_name': 'Backup',
                'verbose_name_plural': 'Backups',
            },
        ),
        migrations.CreateModel(
            name='BackupDefine',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('disk_id', models.SmallIntegerField(verbose_name='Disk ID')),
                ('name', models.CharField(max_length=16, verbose_name='Name')),
                ('type', models.SmallIntegerField(default=1, verbose_name='Type', choices=[(1, 'Dataset'), (2, 'File')])),
                ('desc', models.CharField(max_length=128, verbose_name='Description', blank=True)),
                ('bwlimit', models.IntegerField(null=True, verbose_name='Bandwidth limit', blank=True)),
                ('retention', models.IntegerField(verbose_name='Retention')),
                ('compression', models.SmallIntegerField(default=0, verbose_name='Compression', choices=[(0, 'None'), (1, b'gzip'), (2, b'bzip2')])),
                ('fsfreeze', models.BooleanField(default=False, verbose_name='Application-Consistent?')),
            ],
            options={
                'verbose_name': 'Backup definition',
                'verbose_name_plural': 'Backup definitions',
            },
        ),
        migrations.CreateModel(
            name='Dc',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('enc_json', models.TextField(default=b'KGRwMQou\n', editable=False)),
                ('name', models.CharField(unique=True, max_length=64, verbose_name='Name')),
                ('alias', models.CharField(max_length=32, verbose_name='Alias')),
                ('desc', models.CharField(max_length=128, verbose_name='Description', blank=True)),
                ('access', models.SmallIntegerField(default=3, verbose_name='Access', choices=[(1, 'Public'), (2, 'Disabled'), (3, 'Private'), (4, 'Deleted'), (9, 'Internal')])),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('changed', models.DateTimeField(auto_now=True, verbose_name='Last changed')),
                ('site', models.CharField(unique=True, max_length=260, verbose_name='Site hostname')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, verbose_name='Owner', to=settings.AUTH_USER_MODEL)),
                ('roles', models.ManyToManyField(help_text='The groups this object belongs to. A object will get all permissions granted to each of its groups.', to='gui.Role', verbose_name='Groups', blank=True)),
            ],
            options={
                'verbose_name': 'Datacenter',
                'verbose_name_plural': 'Datacenters',
            },
            bases=(models.Model, vms.models.base._UserTasksModel),
        ),
        migrations.CreateModel(
            name='DcNode',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('enc_json', models.TextField(default=b'KGRwMQou\n', editable=False)),
                ('priority', models.PositiveIntegerField(default=100, help_text='Higher priority means that the automatic node chooser will more likely choose this node.', verbose_name='Priority')),
                ('cpu', models.PositiveIntegerField(help_text='Total number of CPUs (cores).', verbose_name='CPUs')),
                ('ram', models.PositiveIntegerField(help_text='Total RAM size in MB.', verbose_name='RAM (MB)')),
                ('disk', models.PositiveIntegerField(help_text='Size of the local disk pool.', verbose_name='Disk pool size (MB)')),
                ('cpu_free', models.IntegerField(default=0, verbose_name='Free CPUs', editable=False)),
                ('ram_free', models.IntegerField(default=0, verbose_name='Free RAM (MB)', editable=False)),
                ('disk_free', models.IntegerField(default=0, verbose_name='Free disk pool size (MB)', editable=False)),
                ('strategy', models.SmallIntegerField(default=1, verbose_name='Resource strategy', choices=[(1, 'Shared'), (2, 'Shared with limit'), (3, 'Reserved')])),
                ('dc', models.ForeignKey(to='vms.Dc')),
            ],
            options={
                'verbose_name': 'Node',
                'verbose_name_plural': 'Nodes',
            },
        ),
        migrations.CreateModel(
            name='DomainDc',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('domain_id', models.IntegerField(db_index=True)),
                ('dc', models.ForeignKey(to='vms.Dc')),
            ],
            options={
                'db_table': 'vms_domain_dc',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('enc_json', models.TextField(default=b'KGRwMQou\n', editable=False)),
                ('name', models.CharField(unique=True, max_length=64, verbose_name='Name')),
                ('alias', models.CharField(max_length=32, verbose_name='Alias')),
                ('desc', models.CharField(max_length=128, verbose_name='Description', blank=True)),
                ('access', models.SmallIntegerField(default=3, verbose_name='Access', choices=[(1, 'Public'), (2, 'Disabled'), (3, 'Private'), (4, 'Deleted'), (9, 'Internal')])),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('changed', models.DateTimeField(auto_now=True, verbose_name='Last changed')),
                ('uuid', models.CharField(max_length=36, serialize=False, verbose_name='UUID', primary_key=True)),
                ('version', models.CharField(max_length=16, verbose_name='Image version')),
                ('size', models.IntegerField(help_text='Exact same value as in imgadm manifest attribute image_size.', verbose_name='Image size (MB)')),
                ('ostype', models.SmallIntegerField(verbose_name='Guest OS type', choices=[(1, 'Linux VM'), (2, 'SunOS VM'), (3, 'BSD VM'), (4, 'Windows VM'), (5, 'SunOS Zone'), (6, 'Linux Zone')])),
                ('deploy', models.BooleanField(default=False, verbose_name='Deploy required?')),
                ('resize', models.BooleanField(default=False, verbose_name='Resizable?')),
                ('status', models.SmallIntegerField(verbose_name='Status', choices=[(1, 'ok'), (2, 'pending')])),
                ('dc', models.ManyToManyField(to='vms.Dc', verbose_name='Datacenter')),
                ('dc_bound', models.ForeignKey(related_name='image_dc_bound_set', on_delete=django.db.models.deletion.SET_NULL, default=None, blank=True, to='vms.Dc', null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, verbose_name='Owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
            },
            bases=(models.Model, vms.models.base._UserTasksModel),
        ),
        migrations.CreateModel(
            name='IPAddress',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ip', models.GenericIPAddressField(verbose_name='IP Address')),
                ('usage', models.SmallIntegerField(default=1, db_index=True, verbose_name='Usage', choices=[(1, 'Server'), (9, 'Other'), (3, 'Node'), (2, 'Server')])),
                ('note', models.CharField(max_length=255, verbose_name='Note', blank=True)),
            ],
            options={
                'verbose_name': 'IP address',
                'verbose_name_plural': 'IP addresses',
            },
        ),
        migrations.CreateModel(
            name='Iso',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=64, verbose_name='Name')),
                ('alias', models.CharField(max_length=32, verbose_name='Alias')),
                ('desc', models.CharField(max_length=128, verbose_name='Description', blank=True)),
                ('access', models.SmallIntegerField(default=3, verbose_name='Access', choices=[(1, 'Public'), (2, 'Disabled'), (3, 'Private'), (4, 'Deleted'), (9, 'Internal')])),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('changed', models.DateTimeField(auto_now=True, verbose_name='Last changed')),
                ('status', models.SmallIntegerField(verbose_name='Status', choices=[(1, 'ok'), (2, 'pending')])),
                ('ostype', models.SmallIntegerField(blank=True, null=True, verbose_name='Guest OS type', choices=[(1, 'Linux VM'), (2, 'SunOS VM'), (3, 'BSD VM'), (4, 'Windows VM')])),
                ('dc', models.ManyToManyField(to='vms.Dc', verbose_name='Datacenter')),
                ('dc_bound', models.ForeignKey(related_name='iso_dc_bound_set', on_delete=django.db.models.deletion.SET_NULL, default=None, blank=True, to='vms.Dc', null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, verbose_name='Owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ISO image',
                'verbose_name_plural': 'ISO images',
            },
            bases=(models.Model, vms.models.base._UserTasksModel),
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('enc_json', models.TextField(default=b'KGRwMQou\n', editable=False)),
                ('status_change', models.DateTimeField(default=None, verbose_name='Last status change', null=True, editable=False)),
                ('created', models.DateTimeField(verbose_name='Created', editable=False)),
                ('changed', models.DateTimeField(verbose_name='Last changed', editable=False)),
                ('uuid', models.CharField(max_length=36, serialize=False, verbose_name='UUID', primary_key=True)),
                ('hostname', models.CharField(unique=True, max_length=128, verbose_name='Hostname')),
                ('address', models.CharField(max_length=64, verbose_name='Address')),
                ('status', models.SmallIntegerField(default=1, db_index=True, verbose_name='Status', choices=[(2, b'online'), (1, b'maintenance'), (3, b'unreachable'), (9, b'unlicensed')])),
                ('config', models.TextField(verbose_name='Config', blank=True)),
                ('cpu', models.PositiveIntegerField(help_text='Total number of CPUs (cores).', verbose_name='CPUs')),
                ('ram', models.PositiveIntegerField(help_text='Total RAM size in MB.', verbose_name='RAM (MB)')),
                ('cpu_coef', models.DecimalField(default=b'1', help_text='Coefficient for calculating the the total number of virtual CPUs.', verbose_name='CPUs coefficient', max_digits=4, decimal_places=2)),
                ('ram_coef', models.DecimalField(default=b'1', help_text='Coefficient for calculating the maximum amount of memory for virtual machines.', verbose_name='RAM coefficient', max_digits=4, decimal_places=2)),
                ('cpu_free', models.IntegerField(default=0, verbose_name='Free CPUs', editable=False)),
                ('ram_free', models.IntegerField(default=0, verbose_name='Free RAM (MB)', editable=False)),
                ('is_compute', models.BooleanField(default=True, verbose_name='Compute')),
                ('is_backup', models.BooleanField(default=False, verbose_name='Backup')),
                ('is_head', models.BooleanField(default=False, verbose_name='Head node')),
                ('dc', models.ManyToManyField(to='vms.Dc', verbose_name='Datacenter', through='vms.DcNode', blank=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, default=1, verbose_name='Owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Node',
                'verbose_name_plural': 'Nodes',
            },
            bases=(models.Model, vms.models.base._UserTasksModel),
        ),
        migrations.CreateModel(
            name='NodeStorage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('zpool', models.CharField(max_length=64, verbose_name='Zpool', db_index=True)),
                ('dc', models.ManyToManyField(to='vms.Dc', verbose_name='Datacenter', blank=True)),
                ('images', models.ManyToManyField(to='vms.Image', verbose_name='Images', blank=True)),
                ('node', models.ForeignKey(verbose_name='Compute node', to='vms.Node')),
            ],
            options={
                'verbose_name': 'Storage',
                'verbose_name_plural': 'Storages',
            },
            bases=(models.Model, vms.models.base._UserTasksModel),
        ),
        migrations.CreateModel(
            name='SlaveVm',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('enc_json', models.TextField(default=b'KGRwMQou\n', editable=False)),
                ('name', models.CharField(default=b'', max_length=24, verbose_name='Slave name', db_index=True, blank=True)),
                ('sync_status', models.SmallIntegerField(default=0, verbose_name='Replication status', choices=[(0, b'disabled'), (1, b'paused'), (2, b'enabled')])),
                ('last_sync', models.DateTimeField(default=None, null=True, verbose_name='Last synced', blank=True)),
            ],
            options={
                'verbose_name': 'Slave VM',
                'verbose_name_plural': 'Slave VM',
            },
        ),
        migrations.CreateModel(
            name='Snapshot',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('status_change', models.DateTimeField(default=None, verbose_name='Last status change', null=True, editable=False)),
                ('created', models.DateTimeField(verbose_name='Created', editable=False)),
                ('changed', models.DateTimeField(verbose_name='Last changed', editable=False)),
                ('disk_id', models.SmallIntegerField(verbose_name='Disk ID')),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('type', models.SmallIntegerField(default=2, verbose_name='Type', choices=[(1, 'Automatic'), (2, 'Manual')])),
                ('status', models.SmallIntegerField(verbose_name='Status', choices=[(1, 'ok'), (2, 'pending'), (3, 'rollback'), (4, 'lost')])),
                ('size', models.BigIntegerField(null=True, verbose_name='Size', blank=True)),
                ('note', models.CharField(max_length=255, verbose_name='Note', blank=True)),
                ('fsfreeze', models.BooleanField(default=False, verbose_name='Application-Consistent?')),
            ],
            options={
                'verbose_name': 'Snapshot',
                'verbose_name_plural': 'Snapshots',
            },
        ),
        migrations.CreateModel(
            name='SnapshotDefine',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('disk_id', models.SmallIntegerField(verbose_name='Disk ID')),
                ('name', models.CharField(max_length=16, verbose_name='Name')),
                ('desc', models.CharField(max_length=128, verbose_name='Description', blank=True)),
                ('retention', models.IntegerField(verbose_name='Retention')),
                ('fsfreeze', models.BooleanField(default=False, verbose_name='Application-Consistent?')),
                ('periodic_task', models.ForeignKey(blank=True, to='djcelery.PeriodicTask', null=True)),
            ],
            options={
                'verbose_name': 'Snapshot definition',
                'verbose_name_plural': 'Snapshot definitions',
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=64, verbose_name='Name')),
                ('alias', models.CharField(max_length=32, verbose_name='Alias')),
                ('desc', models.CharField(max_length=128, verbose_name='Description', blank=True)),
                ('access', models.SmallIntegerField(default=3, verbose_name='Access', choices=[(1, 'Public'), (2, 'Disabled'), (3, 'Private'), (4, 'Deleted'), (9, 'Internal')])),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('changed', models.DateTimeField(auto_now=True, verbose_name='Last changed')),
                ('type', models.SmallIntegerField(default=1, verbose_name='Storage type', choices=[(1, 'Local'), (3, 'iSCSI'), (4, 'Fiber Channel')])),
                ('size', models.PositiveIntegerField(default=0, verbose_name='Disk pool size (MB)')),
                ('size_coef', models.DecimalField(default=b'0.6', help_text='Coefficient for calculating the maximum amount of disk space for virtual machines.', verbose_name='Disk pool size coefficient', max_digits=4, decimal_places=2)),
                ('size_free', models.IntegerField(default=0, verbose_name='Free disk pool size (MB)', editable=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, verbose_name='Owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Storage',
                'verbose_name_plural': 'Storages',
            },
        ),
        migrations.CreateModel(
            name='Subnet',
            fields=[
                ('name', models.CharField(unique=True, max_length=64, verbose_name='Name')),
                ('alias', models.CharField(max_length=32, verbose_name='Alias')),
                ('desc', models.CharField(max_length=128, verbose_name='Description', blank=True)),
                ('access', models.SmallIntegerField(default=3, verbose_name='Access', choices=[(1, 'Public'), (2, 'Disabled'), (3, 'Private'), (4, 'Deleted'), (9, 'Internal')])),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('changed', models.DateTimeField(auto_now=True, verbose_name='Last changed')),
                ('uuid', models.CharField(max_length=36, serialize=False, verbose_name='UUID', primary_key=True)),
                ('nic_tag', models.CharField(default=b'admin', max_length=32, verbose_name='NIC Tag')),
                ('vlan_id', models.SmallIntegerField(default=0, verbose_name='VLAN ID')),
                ('network', models.GenericIPAddressField(verbose_name='Network')),
                ('netmask', models.GenericIPAddressField(verbose_name='Netmask')),
                ('gateway', models.GenericIPAddressField(null=True, verbose_name='Gateway', blank=True)),
                ('resolvers', models.CharField(help_text='List of DNS servers separated by commas.', max_length=255, verbose_name='Resolvers', blank=True)),
                ('dns_domain', models.CharField(help_text='DNS search domain.', max_length=255, verbose_name='DNS Domain', blank=True)),
                ('ptr_domain', models.CharField(help_text='Name of a Pdns Domain.', max_length=255, verbose_name='PTR Domain', blank=True)),
                ('dhcp_passthrough', models.BooleanField(default=False, verbose_name='DHCP Passthrough')),
                ('dc', models.ManyToManyField(to='vms.Dc', verbose_name='Datacenter')),
                ('dc_bound', models.ForeignKey(related_name='subnet_dc_bound_set', on_delete=django.db.models.deletion.SET_NULL, default=None, blank=True, to='vms.Dc', null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, verbose_name='Owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Network',
                'verbose_name_plural': 'Networks',
            },
            bases=(models.Model, vms.models.base._UserTasksModel),
        ),
        migrations.CreateModel(
            name='TagVm',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
            ],
            options={
                'verbose_name': 'Server Tag',
                'verbose_name_plural': 'Server Tags',
            },
        ),
        migrations.CreateModel(
            name='TaskLogEntry',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('time', models.DateTimeField(verbose_name='time', db_index=True)),
                ('task', models.CharField(max_length=64, verbose_name='task ID', db_index=True)),
                ('task_type', models.SmallIntegerField(default=0, verbose_name='task type', db_index=True)),
                ('status', models.CharField(max_length=12, verbose_name='task status', db_index=True)),
                ('user_id', models.IntegerField(verbose_name='user ID')),
                ('username', models.CharField(max_length=254, verbose_name='username')),
                ('owner_id', models.IntegerField(verbose_name='owner ID', db_index=True)),
                ('object_pk', models.CharField(db_index=True, max_length=128, verbose_name='object ID', blank=True)),
                ('object_name', models.CharField(max_length=254, verbose_name='object name', blank=True)),
                ('object_alias', models.CharField(max_length=254, verbose_name='object alias', blank=True)),
                ('flag', models.SmallIntegerField(default=0, verbose_name='action flag')),
                ('msg', models.TextField(verbose_name='message')),
                ('detail', models.TextField(verbose_name='detail', blank=True)),
                ('content_type', models.ForeignKey(blank=True, to='contenttypes.ContentType', null=True)),
                ('dc', models.ForeignKey(to='vms.Dc')),
            ],
            options={
                'ordering': ('-time',),
                'verbose_name': 'Task Log Entry',
                'verbose_name_plural': 'Task Log',
            },
        ),
        migrations.CreateModel(
            name='Vm',
            fields=[
                ('enc_json', models.TextField(default=b'KGRwMQou\n', editable=False)),
                ('status_change', models.DateTimeField(default=None, verbose_name='Last status change', null=True, editable=False)),
                ('created', models.DateTimeField(verbose_name='Created', editable=False)),
                ('changed', models.DateTimeField(verbose_name='Last changed', editable=False)),
                ('uuid', models.CharField(max_length=36, serialize=False, verbose_name='UUID', primary_key=True)),
                ('hostname', models.CharField(unique=True, max_length=255, verbose_name='Hostname')),
                ('alias', models.CharField(max_length=24, verbose_name='User alias')),
                ('vnc_port', models.IntegerField(verbose_name='VNC port')),
                ('ostype', models.SmallIntegerField(verbose_name='Guest OS type', choices=[(1, 'Linux VM'), (2, 'SunOS VM'), (3, 'BSD VM'), (4, 'Windows VM'), (5, 'SunOS Zone'), (6, 'Linux Zone')])),
                ('status', models.SmallIntegerField(default=9, db_index=True, verbose_name='Status', choices=[(1, b'stopped'), (2, b'running'), (3, b'stopping'), (7, b'notready'), (11, b'deploying'), (12, b'deploying'), (13, b'deploying'), (14, b'deploying'), (8, b'frozen'), (9, b'notcreated'), (71, b'stopped-'), (72, b'running-'), (78, b'frozen-'), (79, b'notcreated-'), (99, b'error')])),
                ('uptime', models.IntegerField(default=0, verbose_name='Aggregated uptime', editable=False)),
                ('uptime_changed', models.IntegerField(default=0, verbose_name='Last update of aggregated uptime', editable=False)),
                ('enc_json_active', models.TextField(default=b'KGRwMQou\n', editable=False)),
                ('enc_info', models.TextField(default=b'KGRwMQou\n', editable=False)),
                ('slave_vms', vms.models.fields.CommaSeparatedUUIDField(default=b'', verbose_name='Slave servers', blank=True)),
                ('dc', models.ForeignKey(verbose_name='Datacenter', to='vms.Dc')),
                ('node', models.ForeignKey(verbose_name='Node', blank=True, to='vms.Node', null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, verbose_name='Owner', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(to='taggit.Tag', through='vms.TagVm', blank=True, help_text='A comma-separated list of tags.', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'VM',
                'verbose_name_plural': 'Virtual machines',
            },
            bases=(models.Model, vms.models.base._UserTasksModel),
        ),
        migrations.CreateModel(
            name='VmTemplate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('enc_json', models.TextField(default=b'KGRwMQou\n', editable=False)),
                ('name', models.CharField(unique=True, max_length=64, verbose_name='Name')),
                ('alias', models.CharField(max_length=32, verbose_name='Alias')),
                ('desc', models.CharField(max_length=128, verbose_name='Description', blank=True)),
                ('access', models.SmallIntegerField(default=3, verbose_name='Access', choices=[(1, 'Public'), (2, 'Disabled'), (3, 'Private'), (4, 'Deleted'), (9, 'Internal')])),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('changed', models.DateTimeField(auto_now=True, verbose_name='Last changed')),
                ('ostype', models.SmallIntegerField(blank=True, null=True, verbose_name='Guest OS type', choices=[(1,  'Linux VM'), (2, 'SunOS VM'), (3, 'BSD VM'), (4, 'Windows VM'), (5, 'SunOS Zone'), (6, 'Linux Zone')])),
                ('dc', models.ManyToManyField(to='vms.Dc', verbose_name='Datacenter')),
                ('dc_bound', models.ForeignKey(related_name='vmtemplate_dc_bound_set', on_delete=django.db.models.deletion.SET_NULL, default=None, blank=True, to='vms.Dc', null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, verbose_name='Owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Template',
                'verbose_name_plural': 'Templates',
            },
            bases=(models.Model, vms.models.base._UserTasksModel),
        ),
        migrations.AddField(
            model_name='vm',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, verbose_name='Template', blank=True, to='vms.VmTemplate', null=True),
        ),
        migrations.AddField(
            model_name='tagvm',
            name='content_object',
            field=models.ForeignKey(to='vms.Vm'),
        ),
        migrations.AddField(
            model_name='tagvm',
            name='tag',
            field=models.ForeignKey(related_name='vms_tagvm_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='snapshotdefine',
            name='vm',
            field=models.ForeignKey(verbose_name='Server', to='vms.Vm'),
        ),
        migrations.AddField(
            model_name='snapshot',
            name='define',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, verbose_name='Snapshot definition', blank=True, to='vms.SnapshotDefine', null=True),
        ),
        migrations.AddField(
            model_name='snapshot',
            name='vm',
            field=models.ForeignKey(verbose_name='Server', to='vms.Vm'),
        ),
        migrations.AddField(
            model_name='snapshot',
            name='zpool',
            field=models.ForeignKey(verbose_name='Zpool', to='vms.NodeStorage'),
        ),
        migrations.AddField(
            model_name='slavevm',
            name='master_vm',
            field=models.ForeignKey(related_name='slave_vm', verbose_name='Master server', to='vms.Vm'),
        ),
        migrations.AddField(
            model_name='slavevm',
            name='vm',
            field=models.OneToOneField(to='vms.Vm'),
        ),
        migrations.AddField(
            model_name='nodestorage',
            name='storage',
            field=models.ForeignKey(verbose_name='Storage', to='vms.Storage'),
        ),
        migrations.AddField(
            model_name='ipaddress',
            name='subnet',
            field=models.ForeignKey(verbose_name='Subnet', to='vms.Subnet'),
        ),
        migrations.AddField(
            model_name='ipaddress',
            name='vm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, default=None, blank=True, to='vms.Vm', null=True, verbose_name='Server'),
        ),
        migrations.AddField(
            model_name='dcnode',
            name='node',
            field=models.ForeignKey(to='vms.Node'),
        ),
        migrations.AddField(
            model_name='backupdefine',
            name='node',
            field=models.ForeignKey(verbose_name='Node', to='vms.Node'),
        ),
        migrations.AddField(
            model_name='backupdefine',
            name='periodic_task',
            field=models.ForeignKey(blank=True, to='djcelery.PeriodicTask', null=True),
        ),
        migrations.AddField(
            model_name='backupdefine',
            name='vm',
            field=models.ForeignKey(verbose_name='Server', to='vms.Vm'),
        ),
        migrations.AddField(
            model_name='backupdefine',
            name='zpool',
            field=models.ForeignKey(verbose_name='Zpool', to='vms.NodeStorage'),
        ),
        migrations.AddField(
            model_name='backup',
            name='dc',
            field=models.ForeignKey(verbose_name='Datacenter', to='vms.Dc'),
        ),
        migrations.AddField(
            model_name='backup',
            name='define',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, verbose_name='Backup definition', blank=True, to='vms.BackupDefine', null=True),
        ),
        migrations.AddField(
            model_name='backup',
            name='node',
            field=models.ForeignKey(verbose_name='Node', to='vms.Node'),
        ),
        migrations.AddField(
            model_name='backup',
            name='vm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, verbose_name='Server', blank=True, to='vms.Vm', null=True),
        ),
        migrations.AddField(
            model_name='backup',
            name='zpool',
            field=models.ForeignKey(verbose_name='Zpool', to='vms.NodeStorage'),
        ),
        migrations.AlterUniqueTogether(
            name='vmtemplate',
            unique_together=set([('alias', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='vm',
            unique_together=set([('node', 'vnc_port')]),
        ),
        migrations.AlterUniqueTogether(
            name='subnet',
            unique_together=set([('alias', 'owner')]),
        ),
        migrations.AlterIndexTogether(
            name='subnet',
            index_together=set([('network', 'netmask')]),
        ),
        migrations.AlterUniqueTogether(
            name='snapshotdefine',
            unique_together=set([('vm', 'disk_id', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='snapshot',
            unique_together=set([('vm', 'disk_id', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='nodestorage',
            unique_together=set([('node', 'zpool')]),
        ),
        migrations.AlterUniqueTogether(
            name='iso',
            unique_together=set([('alias', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='ipaddress',
            unique_together=set([('ip', 'subnet')]),
        ),
        migrations.AlterUniqueTogether(
            name='image',
            unique_together=set([('alias', 'owner', 'version')]),
        ),
        migrations.AlterUniqueTogether(
            name='domaindc',
            unique_together=set([('dc', 'domain_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='dc',
            unique_together=set([('alias', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='backupdefine',
            unique_together=set([('vm', 'disk_id', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='backup',
            unique_together=set([('vm_hostname', 'vm_disk_id', 'name')]),
        ),
    ]
