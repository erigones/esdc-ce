#!/bin/bash -e

ESDC_VER="${1}"
if [[ -z "${1}" ]]; then
	echo "Usage:   $0 <new_dc_version> [-v] [-f]"
	echo "Example: $0 v2.6.7"
	echo "Args:"
	echo "  -v                verbose download"
	echo "  -f                force upgrade even when the requested version is already installed"

	exit 1
fi

if ! [[ "${ESDC_VER}" =~ ^v[0-9]\.[0-9]\.[0-9]$ ]]; then
	echo "Unknown format of Danube Cloud version: ${ESDC_VER}"
	exit 2
fi

# process additional arguments
CURL_OPTS="-s"
FORCE="0"
shift
while (( "$#" )); do
	case "${1}" in
		"-v")
			CURL_OPTS=""
			;;
		"-f")
			FORCE="1"
			;;
		*)
			echo "Ignoring unknown argument '${1}'"
			;;
	esac
	shift
done

NEW_USB_VER="${ESDC_VER/v}"
UPG_DIR="/opt/upgrade"
USB_DEV=""
USBMNT="/mnt/$(svcprop -p 'joyentfs/usb_mountpoint' svc:/system/filesystem/smartdc:default)"

umount_path() {
	if mount | grep -q "${1}"; then
		umount "${1}"
	fi
}

mount_usb_dev() {
	USBKEYS=`/usr/bin/disklist -a`
	mkdir -p "${USBMNT}"
	for key in ${USBKEYS}; do
		if [[ `/usr/sbin/fstyp /dev/dsk/${key}p1` == 'pcfs' ]]; then
			/usr/sbin/mount -F pcfs -o foldcase,noatime /dev/dsk/${key}p1 ${USBMNT};
			if [[ $? == "0" ]]; then
				if [[ ! -f ${USBMNT}/.joyliveusb ]]; then
					/usr/sbin/umount ${USBMNT};
				else
					USB_DEV="/dev/dsk/${key}p1"
					break;
				fi
			fi
		fi
	done
}

printmsg() {
	echo "*** $* ***"
}

cleanup() {
	umount_path "${USBMNT}"
	rm -rf "${UPG_DIR}"
}
upgrade_failed() {
	printmsg "Upgrade failed!"
	cleanup
}


# *** START ***

printmsg "Verifying current installation"
cleanup
mount_usb_dev
if [[ -z "${USB_DEV}" ]]; then
	echo "ESDC USB key not found. Aborting."
	exit 2
fi
if ! [[ -f /mnt/usbkey/version ]]; then
	printmsg "Invalid or unknown USB key format. Aborting upgrade."
	exit 3
fi

CURR_USB_VER="$(cat /mnt/usbkey/version | sed -e 's/^esdc-.e-.n-//')"
WANTED_USB_IMG_VARIANT="$(cat /mnt/usbkey/version | sed -re 's/^(esdc-.e-.n-).*/\1/')"
if [[ "x${FORCE}" != "x1" ]] && [[ "${CURR_USB_VER}" == "${NEW_USB_VER}" ]]; then
	echo "Requested ESDC version is already on the USB key. Nothing to do."
	exit 0
fi

printmsg "Downloading new platform"
ESDC_IMG="${WANTED_USB_IMG_VARIANT}${NEW_USB_VER}.img"
ESDC_IMG_FULL="${UPG_DIR}/${ESDC_IMG}"
ESDC_DOWNLOAD_URL="https://download.erigones.org/esdc/usb/stable/${ESDC_IMG}.gz"
umount_path "${USBMNT}"

trap upgrade_failed EXIT
mkdir -p "${UPG_DIR}"
curl -k ${CURL_OPTS} "${ESDC_DOWNLOAD_URL}" > "${ESDC_IMG}.gz"
printmsg "Unpacking new platform"
gunzip "${ESDC_IMG}.gz"

# start upgrade
printmsg "Writing new platform image to the USB"
# change trailing p1 for p0 (c1t1d0p1 -> c1t1d0p0)
dd if="${ESDC_IMG}" of="${USB_DEV/p1*}p0" bs=16M

printmsg "Verifying newly written USB key"
/usr/sbin/mount -F pcfs -o foldcase,noatime "${USB_DEV}" "${USBMNT}"
trap cleanup EXIT
CURR_USB_VER="$(cat /mnt/usbkey/version | sed -e 's/^esdc-.e-.n-//')"
printmsg "ESDC version on USB: ${CURR_USB_VER}"
printmsg "Upgrade completed successfuly"
printmsg "Please reboot to load new platform"

