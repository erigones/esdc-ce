#!/bin/bash -e

PLATFORM_VER="${1}"
if [[ -z "${1}" ]]; then
	echo "Usage:   $0 <new_platform_version> [--keep-smf-db] [-v] [-f]"
	echo "Example: $0 20170624T192838Z"
	echo "Args:"
	echo "  --keep-smf-db       don't clear SMF database (useful if you don't want to loose"
	echo "                      your manual changes to any SMF service properties)"
	echo "  -v                  verbose download"
	echo "  -f                  force upgrade even when the requested version is already running"

	exit 1
fi

if ! [[ "${PLATFORM_VER}" =~ ^[0-9]+T[0-9]+Z$ ]]; then
	echo "Unknown format of platform version: ${PLATFORM_VER}"
	exit 2
fi

# process additional arguments
KEEP_SMF_DB=0
CURL_OPTS="-s"
FORCE="0"
shift
while (( "$#" )); do
	case "${1}" in
		"--keep-smf-db")
			KEEP_SMF_DB=1
			;;
		"-v")
			CURL_OPTS=""
			;;
		"-f")
			FORCE="1"
			;;
		*)
			echo "Ignoring unknown argument '${1}'"
			;;
	esac
	shift
done

if [[ "x${FORCE}" != "x1" ]] && [[ "${PLATFORM_VER}" == "$(uname -v | sed 's/^[a-z]*_//')" ]]; then
	echo "The requested platform version is already running. Aborting upgrade."
	exit 0
fi


UPG_DIR="/opt/upgrade"
PLATFORM_DIR="${UPG_DIR}/platform"
PLATFORM_FILE="${UPG_DIR}/platform-${PLATFORM_VER}.tgz"
BOOT_ARCHIVE="${PLATFORM_DIR}/platform-${PLATFORM_VER}/i86pc/amd64/boot_archive"
MOUNT_DIR="${UPG_DIR}/mnt"
DCOS_MNTDIR="${MOUNT_DIR}/dcos"
PLATFORM_MOUNT_DIR="${MOUNT_DIR}/platform"
USR_ARCHIVE="${PLATFORM_MOUNT_DIR}/usr.lgz"
USR_ARCHIVE_MOUNT_DIR="${MOUNT_DIR}/usr"
PLATTFORM_DOWNLOAD_URL="https://download.erigones.org/esdc/factory/platform/platform-${PLATFORM_VER}.tgz"

lofi_remove() {
	if [[ -n "${1}" ]]; then
		lofiadm -d "${1}"
	fi
}

umount_path() {
	if mount | grep -q "${1}"; then
		umount "${1}"
	fi
}

umount_be() {
	if beadm list -H | grep -q "^${1};"; then
		beadm umount "${1}"
	fi
}

post_cleanup() {
	printmsg "Cleaning up"
	umount_be   "${NEW_BE}"
	umount_path "${USR_ARCHIVE_MOUNT_DIR}"
	lofi_remove "${USR_LOOPDEV}"
	umount_path "${PLATFORM_MOUNT_DIR}"
	lofi_remove "${PLATFORM_LOOPDEV}"
	rm -rf "${UPG_DIR}"
}
upgrade_failed() {
	printmsg "Upgrade failed!"
	post_cleanup
}
trap upgrade_failed EXIT

printmsg() {
	echo "*** $* ***"
}

### START ###

# pre-cleanup
rm -rf "${UPG_DIR}"
mkdir -p "${UPG_DIR}" "${PLATFORM_DIR}" "${PLATFORM_MOUNT_DIR}" "${USR_ARCHIVE_MOUNT_DIR}"

# correct the dcos-1
# (issue https://github.com/erigones/esdc-factory/issues/94)
if [[ "$(zfs get -Ho value canmount zones/ROOT/dcos-1)" != "noauto" ]]; then
	zfs set canmount=noauto zones/ROOT/dcos-1
fi

# start download
printmsg "Downloading the new platform"
curl -k ${CURL_OPTS} "${PLATTFORM_DOWNLOAD_URL}" > "${PLATFORM_FILE}"
printmsg "Extracting the new platform"
tar zxf "${PLATFORM_FILE}" -C "${PLATFORM_DIR}"

printmsg "Accessing the new platform files"
PLATFORM_LOOPDEV="$(lofiadm -a "${BOOT_ARCHIVE}")"
mount -F ufs "${PLATFORM_LOOPDEV}" "${PLATFORM_MOUNT_DIR}"
USR_LOOPDEV="$(lofiadm -a "${USR_ARCHIVE}")"
mount -r -F ufs "${USR_LOOPDEV}" "${USR_ARCHIVE_MOUNT_DIR}"

printmsg "Creating a new boot environment"
BEADM_NEW_NUMBER="$(expr 1 + $(beadm list -H | tail -1 | cut -d';' -f1 | cut -d- -f2))"
if ! [[ $BEADM_NEW_NUMBER =~ ^[0-9]+$ ]]; then
	# BEADM_NEW_NUMBER is not a correct number
	echo "Cannot get number of current BE."
	exit 5
elif beadm list -H | cut -d';' -f1 | grep -q "dcos-${BEADM_NEW_NUMBER}"; then
	# current BE already exists (beadm lists BE out of order?)
	echo "Cannot get name of new BE."
	exit 6
fi

NEW_BE="dcos-${BEADM_NEW_NUMBER}"
beadm create "${NEW_BE}"
beadm mount "${NEW_BE}" "${DCOS_MNTDIR}"

printmsg "Updating the new boot environment in the background"
rsync -ac --delete --exclude=boot/loader.conf "${PLATFORM_MOUNT_DIR}/"{bin,boot,kernel,lib,platform,sbin,smartdc} "${DCOS_MNTDIR}"
rsync -ac --delete "${USR_ARCHIVE_MOUNT_DIR}/"  "${DCOS_MNTDIR}/usr/"
rsync -a --delete "${PLATFORM_DIR}/platform-${PLATFORM_VER}/i86pc/amd64" "${DCOS_MNTDIR}/platform/i86pc"
# update boot_archive checksum
cksum -x sha1 "${DCOS_MNTDIR}/platform/i86pc/amd64/boot_archive" | cut -d' ' -f1 > "${DCOS_MNTDIR}/platform/i86pc/amd64/boot_archive.hash"
chown -R root:root "${DCOS_MNTDIR}/platform/i86pc/amd64"
if [[ "${KEEP_SMF_DB}" != "1" ]]; then
	# clear SMF database so it can be recreated at reboot
	rm -f "${DCOS_MNTDIR}/etc/svc/repository.db"
fi

printmsg "Activating the new boot environment at next reboot"
beadm activate "${NEW_BE}"
trap post_cleanup EXIT
printmsg "Upgrade completed successfuly"
printmsg "Please reboot as soon as possible.."
