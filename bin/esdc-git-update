#!/bin/bash
# 
# description:  Script performs update of Danube Cloud to version specified as input
#               parameter.
# input params: $1 - version tag or git commit hash that will be checked out
#               $2 - full path to SSL private key
#               $3 - full path to SSL public certificate
#
# author:       Miroslav Bagljas
# email:        miroslav.bagljas@erigones.com
# copyright:    Copyright 2016, Erigones, s. r. o.

set -o pipefail

# #############
# Return codes
# #############
GIT_NOT_FOUND=1
PARAM_MISSING=2
NO_MATCH=3
UP_TO_DATE=4
FAILED_CHECKOUT=5
POST_DEPLOY_FAILED=6
UPGRADE_FAILED=6

# #####################
# Positional arguments
# #####################
VERSION=${1:-}
KEY_PATH=${2:-}
CERT_PATH=${3:-}

# #################
# Global variables
# #################
MAINDIR="$(cd "$(dirname "$0")/.." ; pwd -P)"
ERIGONES_HOME=${ERIGONES_HOME:-"${MAINDIR}"}
CTLSH="${ERIGONES_HOME}/bin/ctl.sh"
DEPLOY_CMD="${CTLSH} deploy --update"

# ##########
# Functions
# ##########
function die() {
	local exit_code="${1:-1}"
	shift
	local msg="$*"

	[[ -n "${msg}" ]] && echo "ERROR: ${msg}" 1>&2

	exit "${exit_code}"
}

# Change working directory to ERIGONES_HOME
cd "${ERIGONES_HOME}"

# Retrieve current Git settings 
if ! git --version >/dev/null; then
	die $GIT_NOT_FOUND "Git was not found on system!"
fi

if [[ -z "${VERSION}" ]]; then
	die $PARAM_MISSING "Version number must be provided as first parameter of this script."
fi

# Git environmental variables for cloning over HTTPS
if [[ ! -z "${KEY_PATH}" ]]; then
	export GIT_SSL_KEY=${KEY_PATH}
fi

if [[ ! -z "${CERT_PATH}" ]]; then
	export GIT_SSL_CERT=${CERT_PATH}
fi

export GIT_SSL_NO_VERIFY="false"

# Gather information about current status of esdc git repository
CURRENT_VERSION=$(git rev-parse HEAD)
UPDATE_URL=$(git config --list | grep "remote.origin.url" | awk -F '=' '{print $2}')
# get most recent tag reachable from current commit
GIT_DESCRIBE=$(git describe)
MOST_RECENT_TAG=$(echo "${GIT_DESCRIBE}" | awk -F '-' '{print $1}')
COMMITS_AHEAD_TAG=$(echo "${GIT_DESCRIBE}" | awk -F '-' '{print $2}')

echo "#######################################"
echo "Remote git repository URL: ${UPDATE_URL}"
echo "Current HEAD points to commit: ${CURRENT_VERSION}"
echo "Most recent tag reachable: ${MOST_RECENT_TAG}"
echo "Number of commits ahead of recent tag: ${COMMITS_AHEAD_TAG}"
echo "SSL key file: ${KEY_PATH}"
echo "SSL certificate file: ${CERT_PATH}"
echo "#######################################"

# fetch most recent changes first
# MERGE will be done only if requested VERSION is among fetched objects
git fetch origin

AVAILABLE_TAGS=$(git show-ref --tags)
# When VERSION matches one of the tags name in the list of reference-tags
# assign the commit reference to VERSION_REF variable
# else assume that VERSION holds value of the commit reference
if echo "${AVAILABLE_TAGS}" | awk '{print $NF}' | grep "refs/tags/${VERSION}$" >/dev/null; then
	VERSION_REF=$(git rev-parse "${VERSION}")
else
	if git rev-list --all | grep "^${VERSION}$" >/dev/null; then
		VERSION_REF="${VERSION}"
	else
		ERR_MSG="Coudln't match '${VERSION}' you requested with any of the commits. Aborting upgrade."
		die $NO_MATCH "${ERR_MSG}"
	fi
fi

# if we are already at the requested revision exit
if [[ "${VERSION_REF}" == "$(git rev-parse HEAD)" ]]; then
	ERR_MSG="Already at requested revision: ${VERSION} with hash: ${VERSION_REF}"
	die $UP_TO_DATE "${ERR_MSG}"
fi

ERR_MSG="Failed to checkout commit: ${VERSION_REF}"
git checkout "${VERSION_REF}" || die $FAILED_CHECKOUT "${ERR_MSG}"

if [[ "$(uname -s)" == "SunOS" ]] && [[ -f /usr/bin/zonename ]] && [[ "$(/usr/bin/zonename)" == "global" ]]; then
	DEPLOY_CMD="${DEPLOY_CMD} --node"
else
	# run appliance upgrade
	"${ERIGONES_HOME}/bin/esdc-appliance-update" || die $UPGRADE_FAILED "Appliance upgrade failed"
fi

# Running ctl.sh deploy --update
deploy_cmd_res=$(${DEPLOY_CMD} 2>&1)

if [[ ${?} -eq 0 ]]; then
	echo "Post deploy command was successful"
	echo "${deploy_cmd_res}" | tail -n 7
else
	echo "${deploy_cmd_res}" >&2
	die $POST_DEPLOY_FAILED "Post deploy command failed"
fi
