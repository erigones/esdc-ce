# vim: set filetype=yaml expandtab tabstop=2 shiftwidth=2 softtabstop=2 background=dark :

#- name: import pg95 repo
#  yum:
#    name: https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-3.noarch.rpm
#    state: installed
#
#- name: install pg95
#  yum:
#    name: postgresql95-server, postgresql95-contrib, python-psycopg2
#    state: installed
#
#- name: init DB dir on master
#  shell: "{{ bindir }}/postgresql95-setup initdb"
#  args:
#    creates: "{{ pgdata }}/PG_VERSION"
#  when: inventory_hostname == "{{ cluster_master_host }}"   # run only on one node
#
#- name: create DB conf dir
#  file: state=directory path="{{ pgdata }}/conf.d"
#  when: inventory_hostname == "{{ cluster_master_host }}"   # run only on one node
#  args:
#    owner: postgres
#    group: postgres
#    mode:  0700
#
#- name: push DB config (clustering)
#  template: src=postgresql.conf.j2 dest="{{ pgdata }}/postgresql.conf"
#  when: inventory_hostname == "{{ cluster_master_host }}"   # run only on one node
#  args:
#    owner: postgres
#    group: postgres
#    mode:  0600

- name: push DB config (logging)
  copy: src=pg-ansible.conf dest="{{ pgdata }}/conf.d/ansible.conf"
  when: inventory_hostname == "{{ cluster_master_host }}"   # run only on one node
  notify: restart postgresql
  args:
    owner: postgres
    group: postgres
    mode:  0600

- name: push DB clustering conf
  copy: src=pg-clustering.conf dest="{{ pgdata }}/conf.d/clustering.conf"
  when: inventory_hostname == "{{ cluster_master_host }}"   # run only on one node
  notify: restart postgresql
  args:
    owner: postgres
    group: postgres
    mode:  0600

- meta: flush_handlers

- name: push DB config (ACL)
  template: src=pg_hba.conf.j2 dest="{{ pgdata }}/pg_hba.conf"
  when: inventory_hostname == "{{ cluster_master_host }}"   # run only on one node
  notify: reload postgresql
  args:
    owner: postgres
    group: postgres
    mode:  0600

- meta: flush_handlers

#hostname:port:database:username:password
- name: setup DB cluster auth (master IP)
  lineinfile: dest="~postgres/.pgpass" line="{{ cluster_vip }}:{{ postgres_port }}:replication:postgres:{{ pg_repl_pass }}" state=present
  args:
    owner: postgres
    group: postgres
    mode:  0600
    create: yes

- name: setup DB cluster replication auth (master IP)
  lineinfile: dest="~postgres/.pgpass" line="{{ cluster_vip }}:{{ postgres_port }}:postgres:{{ pg_repl_user }}:{{ pg_repl_pass }}" state=present
  args:
    owner: postgres
    group: postgres
    mode:  0600
    create: yes

- name: setup DB cluster replication auth (master IP)
  lineinfile: dest="~postgres/.pgpass" line="{{ cluster_vip }}:{{ postgres_port }}:replication:{{ pg_repl_user }}:{{ pg_repl_pass }}" state=present
  args:
    owner: postgres
    group: postgres
    mode:  0600
    create: yes

- name: setup DB cluster replication auth (all nodes)
  lineinfile: dest="~postgres/.pgpass" line="{{ hostvars[item].ansible_default_ipv4.address }}:{{ postgres_port }}:replication:{{ pg_repl_user }}:{{ pg_repl_pass }}" state=present
  with_items: "{{play_hosts}}"
  args:
    owner: postgres
    group: postgres
    mode:  0600
    create: yes

- name: check if master host ("{{ cluster_master_host }}") is really a DB master
  shell: psql -Aqtc "SELECT pg_is_in_recovery()"
  when: inventory_hostname == "{{ cluster_master_host }}"   # run only on one node
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: no
  register: is_slave
  failed_when: is_slave.stdout == 't'

- name: mark master DB
  lineinfile: dest="{{ pgdata }}/.synchronized" line="DO NOT REMOVE THIS FILE! Otherwise DB sync can go wrong." state=present
  args:
    owner: postgres
    group: postgres
    mode:  0600
    create: yes
  when: inventory_hostname == "{{ cluster_master_host }}"   # run only on one node
  register: create_syncfile

- name: check if DB is running (failure is ok)
  #shell: /bin/sh -c 'if {{ bindir }}/pg_ctl -D "{{ pgdata }}" status &> /dev/null; then echo True; else echo False; fi'
  shell: "{{ bindir }}/pg_ctl -D {{ pgdata }} status"
  register: db_running
  become: yes
  become_user: postgres
  ignore_errors: True

# check if the DB is already clustered
# If the resource constraint already exists, it means that DB clustering was fully applied before
# and the database should run only from cluster resource.
- name: check if DB is running under cluster (failure is OK)
  #shell: /bin/sh -c 'if pcs resource show "{{ cluster_postgres_HA_res_name }}" &> /dev/null; then echo True; else echo False; fi'
  #shell: pcs resource show "{{ cluster_postgres_HA_res_name }}"
  shell: pcs constraint location show resources "{{ cluster_postgres_HA_res_name }}" | grep -q Enabled
  register: db_resource_exists
  ignore_errors: True

- name: start master DB if necessary (without cluster)
  service: name="{{ postgres_orig_svcname }}" state=started enabled=yes
  when: (inventory_hostname == "{{ cluster_master_host }}") and
        (db_resource_exists|failed) and
        (db_running|failed)

# if DB is clustered and is not running, we have a problem.. try at least cleaning the resource status
- name: start master DB if necessary (in cluster)
  shell: pcs resource cleanup "{{ cluster_postgres_HA_res_name }}" && sleep 15
  when: (inventory_hostname == "{{ cluster_master_host }}") and
        (db_resource_exists|succeeded) and
        (db_running|failed)

- name: setup DB replication auth
  postgresql_user:
    name: "{{ pg_repl_user }}"
    state: present
    port: "{{ postgres_port }}"
    password: "{{ pg_repl_pass }}"
    role_attr_flags: SUPERUSER,LOGIN
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: no
  when: inventory_hostname == "{{ cluster_master_host }}"   # run only on one node

#- name: re-check DB datadir
#  find: paths="{{ pgdata }}"
#  register: datadir_files

# if the file does not exist, DB sync is needed
- name: check if DB sync is required
  stat: path="{{ pgdata }}/.synchronized"
  register: db_sync_file

- name: stop slave DB
  service: name="{{ postgres_orig_svcname }}" state=stopped enabled=false
  when: (not db_sync_file.stat.exists) and
        (db_resource_exists|failed) and
        (db_running|succeeded)

- name: remove slave DB datadir before sync
  file: state=absent path="{{ pgdata }}"
  #shell: rm -rf "{{ pgdata }}" 
  #args:
  #  creates: "{{ pgdata }}/.synchronized"     # will not delete if the file exists (means that DB is already synced)
  when: not db_sync_file.stat.exists
  register: delete_datadir

# replicate slave node (assumes firewall is already setup)
# run only on slave nodes and only when postgres datadir is empty
- name: synchronize slave databases
  shell: '{{ bindir }}/pg_basebackup -h "{{ hostvars[cluster_master_host].ansible_default_ipv4.address }}" -p {{ postgres_port }} -R -D "{{ pgdata }}" -U "{{ pg_repl_user }}" -v -P --xlog-method=stream'
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: no
  when: delete_datadir.changed
  #when: (inventory_hostname != "{{ cluster_master_host }}") and
  #      (datadir_files.matched|int == 0)

#- name: Exterminate mankind
#  pause: prompt='Please confirm you want to exterminate mankind! Press return to continue. Press Ctrl+c and then "a" to abort'

- name: start slave DBs
  service: name="{{ postgres_orig_svcname }}" state=started enabled=yes
  when: (inventory_hostname != "{{ cluster_master_host }}") and
        (db_resource_exists|failed) and
        delete_datadir.changed

#- name: check if slaves are connected
#  shell: psql -Aqtc "SELECT count(*) FROM pg_stat_replication"
#  when: inventory_hostname == "{{ cluster_master_host }}"   # run only on one node
#  become: yes
#  become_user: postgres
#  register: slavecount
#  vars:
#    ansible_ssh_pipelining: no
#  until: (slavecount.stdout|string) == ((cluster_all_hosts|length - 1)|string)
#  retries: 10
#  delay: 2
