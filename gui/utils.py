from django.template.loader import render_to_string as just_render
from django.template import RequestContext
from django.contrib.messages.storage.base import Message
from django.contrib.messages import constants
from django.http import QueryDict
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.shortcuts import resolve_url, redirect as _redirect
from django.utils.six import iteritems

# noinspection PyUnresolvedReferences,PyProtectedMember
from api.fields import get_boolean_value  # noqa: F401 (Leave it here - used by gui.views)
from api.api_views import APIView
from api.exceptions import InvalidInput
from api.task.log import get_tasklog_cached
from api.task.utils import get_user_tasks as _get_user_tasks
from gui.navigation import Navi
from gui.dc.forms import DcSwitch
from gui.signals import view_data_collected, allow_switch_company_profile
from que.utils import is_mgmt_task


class Messages(list):
    """
    Faster version of django.contrib.messages but only useful in simple situations where the messages object is
    accessible directly in rendered template.
    """
    # noinspection PyMissingConstructor
    def __init__(self, msg=None, level=constants.SUCCESS):
        if msg:
            self.add_message(level, msg)

    def add_message(self, lvl, msg):
        self.append(Message(lvl, msg))

    def debug(self, msg):
        self.add_message(constants.DEBUG, msg)

    def info(self, msg):
        self.add_message(constants.INFO, msg)

    def success(self, msg):
        self.add_message(constants.SUCCESS, msg)

    def warning(self, msg):
        self.add_message(constants.WARNING, msg)

    def error(self, msg):
        self.add_message(constants.ERROR, msg)


def render_to_string(request, template, context):
    """
    Just render the template without HTTP headers. Used for socket.io.
    """
    return just_render(template, context, context_instance=RequestContext(request))


def get_base_template(request):
    """
    Generic function that load base template depends on request type
    """
    if request.is_ajax():
        return 'base_ajax.html'
    else:
        return 'base.html'


def get_navigation(request, second_nav=None, **options):
    """
    Generic function that loads all required data for MENU that need to be in template.
    """
    n = Navi(request, **options)

    return {
        'view_name': second_nav,
        'main_nav': n.get_main_nav(),
        'second_nav': n.get_secondary_nav(second_nav),
    }


def get_user_tasks(request):
    """
    Like api.task.utils.get_user_tasks, but without Mgmt Tasks.
    """
    def no_m_tasks(task_id):
        return not is_mgmt_task(task_id)

    return _get_user_tasks(request, filter_fun=no_m_tasks)


def collect_view_data(request, second_nav, dc_dns_only=False, **context):
    """
    Function collects view_data generated by other functions
    """
    view_data = {
        'navi': get_navigation(request, second_nav, dc_dns_only=dc_dns_only),
        'load_base': get_base_template(request),
        'tasklog_cached': get_tasklog_cached(request),
        'pending_tasks': get_user_tasks(request),
        'dcs_form': DcSwitch(request, prefix='dc'),
        'submenu_auto': True,
    }
    view_data.update(context)
    view_data_collected.send(sender='gui.utils.collect_view_data', request=request, context=view_data)

    return view_data


def context_list_append(context, item, value):
    """
    Function update context if it doesnt exists.
    """
    if item not in context:
        context[item] = []

    context[item].append(value)


def get_age(delta):
    """
    Convert timedelta object to human readable string.
    """
    days = delta.days
    hours, rem = divmod(delta.seconds, 3600)
    minutes, seconds = divmod(rem, 60)

    if days:
        return '%dd %dh %dm' % (days, hours, minutes)
    else:
        return '%dh %dm %ds' % (hours, minutes, seconds)


def tags_to_string(tag_list, sep=','):
    """
    Convert list of tags to string suitable for editing by the user.
    """
    if not tag_list:
        return ''

    return sep.join(map(unicode, sorted(tag_list)))


def get_order_by(request, api_view=APIView, user_default=None, db_default=None):
    """
    Parse the query string and return two order_by lists:
    one used in the template and other one used for ordering the query string.
    """
    if db_default is None:
        db_default = api_view.order_by_default

    if user_default is None:
        user_default = db_default

    order_by = request.GET.get('order_by', None)

    if order_by:
        order_by = order_by.split(',')

        try:
            return order_by, api_view.validate_order_by(order_by)
        except InvalidInput:
            pass

    return user_default, db_default


def get_pager(request, qs, per_page=25, page=None):
    """
    Return django paginator for queryset.
    """
    paginator = Paginator(qs, per_page)

    if page is None:
        page = request.GET.get('page', 1)

    try:
        pager = paginator.page(page)
    except PageNotAnInteger:
        pager = paginator.page(1)
    except EmptyPage:
        pager = paginator.page(paginator.num_pages)

    return pager


def reverse(*args, **kwargs):
    """
    Like django.core.urlresolvers.reverse with optional query_string parameter.
    """
    query_string = kwargs.pop('query_string', None)
    url = resolve_url(*args, **kwargs)

    if query_string is not None:
        if isinstance(query_string, QueryDict):
            query_string = '?' + query_string.urlencode()
        elif not query_string.startswith('?'):
            url += '?'
        url += query_string

    return url


def redirect(*args, **kwargs):
    """
    Convenient wrapper around redirect shortcut with optional query_string parameter.
    """
    return _redirect(reverse(*args, **kwargs))


def get_query_string(request, **kwargs):
    """
    Conditional query string creator. Only useful for boolean parameters.
    """
    qs = QueryDict('', mutable=True)

    for name, condition in iteritems(kwargs):
        try:
            value = request.GET[name]
        except KeyError:
            pass
        else:
            if condition and value:
                qs[name] = 1

    return qs


def user_profile_company_only_form(user):
    result = allow_switch_company_profile.send(sender='gui.utils.user_profile_company_only_form', user=user)
    allow = False

    for signal_results in result:
        if signal_results[1]:
            allow = True

    return allow
